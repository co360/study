package com.company.hellospeedment.db0.hellospeedment.user.generated;

import com.company.hellospeedment.db0.hellospeedment.user.User;
import com.company.hellospeedment.db0.hellospeedment.user.UserImpl;
import com.speedment.Speedment;
import com.speedment.exception.SpeedmentException;
import com.speedment.field.FieldIdentifier;
import com.speedment.field.trait.FieldTrait;
import com.speedment.internal.core.manager.sql.AbstractSqlManager;
import com.speedment.util.tuple.Tuple1;
import com.speedment.util.tuple.Tuples;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.stream.Stream;
import javax.annotation.Generated;
import static com.speedment.internal.util.sql.ResultSetUtil.*;

/**
 * The generated base manager implementation representing an entity (for
 * example, a row) in the Table hellospeedment.db0.hellospeedment.user.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedUserManagerImpl extends AbstractSqlManager<User> implements GeneratedUserManager {
    
    private final static Tuple1<Class<Long>> PRIMARY_KEY_CLASSES = Tuples.of(Long.class);
    
    protected GeneratedUserManagerImpl(Speedment speedment) {
        super(speedment);
        setEntityMapper(this::newEntityFrom);
    }
    
    protected User newEntityFrom(ResultSet resultSet) throws SQLException, SpeedmentException {
        final User entity = newEmptyEntity();
        try {
            entity.setId(resultSet.getLong(1));
            entity.setName(resultSet.getString(2));
            entity.setAge(resultSet.getInt(3));
        }
        catch (SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    @Override
    public User newEmptyEntity() {
        return new UserImpl() {
            @Override
            protected Speedment speedment() {
                return speedment;
            }
        };
    }
    
    @Override
    public Object get(User entity, FieldIdentifier<User> identifier) {
        switch ((User.Identifier) identifier) {
            case ID : return entity.getId();
            case NAME : return entity.getName();
            case AGE : return entity.getAge();
            default : throw new IllegalArgumentException("Unknown identifier '" + identifier + "'.");
        }
    }
    
    @Override
    public void set(User entity, FieldIdentifier<User> identifier, Object value) {
        switch ((User.Identifier) identifier) {
            case ID : entity.setId((Long) value); break;
            case NAME : entity.setName((String) value); break;
            case AGE : entity.setAge((Integer) value); break;
            default : throw new IllegalArgumentException("Unknown identifier '" + identifier + "'.");
        }
    }
    
    @Override
    public Stream<FieldTrait> fields() {
        return Stream.of(
            User.ID,
            User.NAME,
            User.AGE
        );
    }
    
    @Override
    public Stream<FieldTrait> primaryKeyFields() {
        return Stream.of(
            User.ID
        );
    }
    
    @Override
    public Tuple1<Class<Long>> getPrimaryKeyClasses() {
        return PRIMARY_KEY_CLASSES;
    }
}