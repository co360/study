* Practice Problem 3.1
  | Operand        | Value |
  |----------------+-------|
  | %rax           | 0x100 |
  | 0x104          |  0xAB |
  | $0x108         |  0x13 |
  | (%rax)         |  0xFF |
  | 4(%rax)        |  0xAB |
  | 9(%rax,%rdx)   |  0x11 |
  | 260(%rcx,%rdx) |  0x13 |
  | 0xFC(,%rcx,4)  |  0xFF |
  | (%rax,%rdx,4)  |  0x11 |
* Practice Problem 3.2
  movl %eax, (%rsp)
  movw (%rax), %dx
  movb $0xFF, %bl
  movb (%rsp,%rdx,4), %dl
  movq (%rdx), %rax
  movb %dx, (%rax)
* Practice Problem 3.3
  movb $0xF, (%ebx)   : incorrect memory value (4 bits).
  movl %rax, (%rsp)   : rax register is a quad word.
  movw (%rax),4(%rsp) : invalid operand form.
  movb %al,%sl        : sl register doesn't exist.
  movq %rax,$0x123    : incorrect memory value (12 bits).
  movl %eax,%rdx      : rdx register is a quad word.
  movb %si, 8(%rbp)   : si register is a word.
* Practice Problem 3.4
  ~src_t *sp;  // rdi~
  ~dest_t *dp; // rsi~
  ~*dp = (dest_t) *sp;~
  Registers: %rax, %eax, %ax, or %al

  | src_t          | dest_t         | Instruction         |
  |---------------+---------------+---------------------|
  | long          | long          | movq (%rdi), %rax   |
  |               |               | movq %rax, (%rsi)   |
  | char          | int           | movsbl (%rdi), %eax |
  |               |               | movl %eax, (%rsi)   |
  | char          | unsigned      | movl (%rdi), %eax   |
  |               |               | movl %eax, (%rsi)   |
  | unsigned char | long          | movq (%rdi), %rax   |
  |               |               | movq %rax, (%rsi)   |
  | int           | char          | movb (%rdi), %al    |
  |               |               | movb %al, (%rsi)    |
  | unsigned      | unsigned char | movb (%rdi), %al    |
  |               |               | movb %al, (%rsi)    |
  | char          | short         | movsbw (%rdi), %ax  |
  |               |               | movw %ax, (%rsi)    |
* Practice Problem 3.5
#+NAME ex5
#+BEGIN_SRC C
  #include <stdio.h>

  void decode1(long *xp, long *yp, long *zp);

  void decode1(long *xp, long *yp, long *zp) {
    long a = *xp;
    long b = *yp;
    long c = *zp;
    ,*yp = a;
    ,*zp = b;
    ,*xp = c;
  }

  int main() {
    long a = 1;
    long b = 2;
    long c = 3;

    printf("%d %d %d\n", a, b, c);
    decode1(&a, &b, &c);
    printf("%d %d %d\n", a, b, c);

    return 0;
  }
#+END_SRC

#+RESULTS:
| 1 | 2 | 3 |
| 3 | 1 | 2 |
* Practice Problem 3.6
  rax = x
  rcx = y

  | Instruction                 | Result |
  |-----------------------------+--------|
  | leaq 6(%rax), %rdx          | 6+x    |
  | leaq (%rax, %rcx), %rdx     | x+y    |
  | leaq (%rax, %rcx, 4), %rdx  | x+4y   |
  | leaq 7(%rax, %rax, 8), %rdx | 7+9x   |
  | leaq 0xA(, %rcx, 4), %rdx   | 10+4y  |
  | leaq 9(%rax, %rcx, 2), %rdx | 9+x+2y |
* Practice Problem 3.7
  x+4x -> 5x
  5x+2y
  5x+2y+8z

#+NAME ex7
#+BEGIN_SRC C
  long scale2(long x, long y, long z) {
    long t = (5 * x) + (2 * y) + (8 * z);
    return t;
  }
#+END_SRC
* Practice Problem 3.8
  | Instruction                | Destination | Value |
  |----------------------------+-------------+-------|
  | addq %rcx, (%rax)          |       0x100 | 0x100 |
  | subq %rdx, 8(%rax)         |       0x108 |  0xA8 |
  | imulq $16, (%rax, %rdx, 8) |       0x118 |  0xB0 |
  | incq 16(%rax)              |       0x110 |  0x14 |
  | decq %rcx                  |        %rcx |   0x0 |
  | subq %rdx, %rax            |        %rax |  0xFD |
* Practice Problem 3.9
  long shift_left4_rightn(long x, long n)
  x in %rdi, n in %rsi
shift_left4_rightn:
  movq %rdi, %rax   Get x
  salq $4, %rax     x <<= 4
  movl %esi, %ecx   Get n (4 bytes)
  sarq %ecx, %rax   x >>= n
* Practice Problem 3.10
#+NAME ex10
#+BEGIN_SRC C
  long arith2(long x, long y, long z) {
    long t1 = x | y;
    long t2 = 3 >> t1;
    long t3 = ~t2;
    long t4 = z - t3;
    return t4;
  }
#+END_SRC
* Practice Problem 3.11
~xorq %rdx, %rdx~
** A
  It's a optimization of compiler, in which it always results in zero.
  & e ~.
** B
  movq $0, %rdx
** C
  Both use the same amount.
* Practice Problem 3.12
  void uremdiv(unsigned long x, unsigned long y, unsigned long *qp, unsigned long *rp)
  x in %rdi, y in %rsi, qp in %rdx, rp in %rcx
uremdiv:
  movq  %rdx, %r8
  movq  %rdi, %rax
  divq %rsi
  movq  %rax, (%r8)
  movq  %rdx, (%rcx)
  ret
* Practice Problem 3.13
  A -> setl  (SF ^ OF)
  B -> setge ~(SF ^ OF)
  C -> setbe (CF | ZF)
  D -> setne ~ZF

  C and D.
* Practice Problem 3.14
  A -> setge ~(SF ^ OF)
  B -> sete  ZF
  C -> seta  (~CF ^ ~ZF)
  D -> setle (SF ^ OF) | ZF

  A and C.
* Practice Problem 3.15
  A. je 4003fc
  B. je 400431
  C. 400540
     400547
  D. jmpq 4005ed
* Practice Problem 3.16
** A
#+NAME ex36
#+BEGIN_SRC C
  void cond(long a,  long *p) {
    if (*p & *p) {
      goto l1;
    }
    if (a >= *p) {
      goto l1;
    }
    a = *p;
  l1: return;
  }
#+END_SRC
** B
  Each conditional has a branch because there are different tests.
* Practice Problem 3.17
** A
#+NAME ex37
#+BEGIN_SRC C
  long lt_cnt = 0;
  long ge_cnt = 0;

  long gotodiff_se(long x,  long y) {
    long result;
    if (x >= y) {
      goto x_ge_y;
    }
    goto x_lt_y;
  x_ge_y:
    ge_cnt++;
    result = x - y;
    return result;
  x_lt_y:
    lt_cnt++;
    result =  y - x;
    return result;
  }
#+END_SRC
** B
  Code optimization, when multiple branches.
* Practice Problem 3.18
#+NAME ex18
#+BEGIN_SRC C
  long test(long x, long y, long z) {
    long val = x * y;
    if (x >= -3) {
      if (x <= 2) {
        val = z + (x + y);
      } else {
        val = x * z;
      }
    } else if (y >= x) {
      val = y * z;
    }
    return val;
  }
#+END_SRC
* Practice Problem 3.19
** A
  T_mp = 2(31-16)
  T_mp = 30
** B
  Between 16 and 46 cycles.
* Practice Problem 3.20
** A
  OP -> mod
** B
  res = 7 + x
  if x >= 0
    res = x
  res = res >> 3
  return res
* Practice Problem 3.21
#+NAME ex21
#+BEGIN_SRC C
  long test(long x, long y) {
    long val = y - x;
    if (y <= 0) {
      if (y <= -2) {
        val = x + y;
      } else {
        val = 8 * x;
      }
    } else if (y >= x) {
      val = x + y;
    }
    return val;
  }
#+END_SRC
* Practice Problem 3.22
** A
  n = 4294967296.
** B
  n = 18446744073709551616.
* Practice Problem 3.23
** A
  x = rdi.
  y = rcx.
  n = rdx.
** B
  In the leaq instruction.
** C
#+NAME ex23
#+BEGIN_SRC C
  long dw_loop(long x) {
    int result = x;
    int y = x * x;
    int n = 2 * x;
  loop:
    result += 1 + y;
    n--;
    if (n > 0) {
      goto loop;
    }
    return result;
  }
#+END_SRC
* Practice Problem 3.24
#+NAME ex24
#+BEGIN_SRC C
  long loop_while (long a, long b) {
    long result = 1;
    while (a < b) {
      result *= a + b;
      a =  a + 1;
    }
  }
#+END_SRC
* Practice Problem 3.25
#+NAME ex25
#+BEGIN_SRC C
  long loop_while2(long a, long b) {
    long result = b;
    while (b > 0) {
      result *= a;
      b = b - a;
    }
    return result;
  }
#+END_SRC
* Practice Problem 3.26
** A
  Jump-to-middle translation method.
** B
#+NAME ex26
#+BEGIN_SRC C
  #include <stdio.h>

  long fun_a(unsigned long x) {
    long val = 0;
    while (x != 0) {
      val ^= x;
      x >>= 1;
    }
    return val & 1;
  }

  int main() {
    for (int i = 0; i < 30; ++i) {
      printf("%d\n", fun_a(i));
    }

    return 0;
  }
#+END_SRC

#+RESULTS:
| 0 |
| 1 |
| 1 |
| 0 |
| 1 |
| 0 |
| 0 |
| 1 |
| 1 |
| 0 |
| 0 |
| 1 |
| 0 |
| 1 |
| 1 |
| 0 |
| 1 |
| 0 |
| 0 |
| 1 |
| 0 |
| 1 |
| 1 |
| 0 |
| 0 |
| 1 |
| 1 |
| 0 |
| 1 |
| 0 |
** C
  Thue-Morse sequence.
* Practice Problem 3.27
#+NAME ex27
#+BEGIN_SRC C
  #include <stdio.h>

  long fact_for(long n) {
    long result = 1;
    long i = 2;
    goto test;
  loop:
    result *= i;
    i++;
  test:
    if (i <= n) {
      goto loop;
    }
    return result;
  }

  long fact_for_while (long n) {
    long result = 1;
    long i = 2;
    while (i <= n) {
      result *= i;
      i++;
    }
    return result;
  }

  long fact_for_gd(long n) {
    long result = 1;
    long i = 2;
    if (i > n) {
      goto done;
    }
  loop:
    result *= i;
    i++;
    if (i <= n) {
      goto loop;
    }
  done:
    return result;
  }

  int main() {
    printf("%d\n", fact_for(10));
    printf("%d\n", fact_for_while(10));
    printf("%d\n", fact_for_gd(10));

    return 0;
  }
#+END_SRC

#+RESULTS:
| 3628800 |
| 3628800 |
| 3628800 |
* Practice Problem 3.28
** A
#+NAME ex28
#+BEGIN_SRC C
  #include <stdio.h>

  long fun_b(unsigned long x) {
    long val = 0;
    long i;
    for (i = 64; i != 0; i--) {
      val += val;
      val |= x & 1;
      i >>= 1;
    }
    return val;
  }

  int main() {
    int i;
    for (i = 0; i < 10; i++) {
      printf("%d\n", fun_b(i));
    }

    return 0;
  }
#+END_SRC

#+RESULTS:
|  0 |
| 31 |
|  0 |
| 31 |
|  0 |
| 31 |
|  0 |
| 31 |
|  0 |
| 31 |

** B
  Code optimization with do-while behavior.
** C
  The output shows 0 when even and 31 when odd.
* Practice Problem 3.29
** A
  The update-expt statement is skipped and an infinite loop will occur.
** B
  Yes, with a block for update-expt.
* Practice Problem 3.30
#+NAME ex30
#+BEGIN_SRC C
  void switch2(long x, long *dest) {
    long val = 0;
    switch (x) {
    case 1: {                     /* .L9 */
      val = 0;
      break;
    }
    case 2: {                     /* .L5 */
    case 9: {
      val = 0;
      break;
    }
    case 3: {                     /* .L6 */
      val = 0;
      break;
    }
    case 4: {                     /* .L7 */
    case 6: {
      val = 0;
      break;
    }
    case 7: {                     /* .L8 */
      val = 0;
      break;
    }
    default:                      /* .L2 */
      val = 0;
      break;
    }
    ,*dest = val;
  }
#+END_SRC
** A
  Labels: 1, 2,9, 3, 4,6, 7 and default (5 and 8).
** B
  Multiple labels: 2 and 9; 4 and 6.
* Practice Problem 3.31
#+NAME ex31
#+BEGIN_SRC C
  void switcher(long a, long b, long c, long *dest) {
    long val;
    switch (a) {
    case 5: {                     /* Case A */
      c = a ^ 15;
      /* Fall through */
    }
    case 0: {                     /* Case B */
      val = 112 + d;
      break;
    }
    case 2:                       /* Case C */
    case 7: {                     /* Case D */
      val = 4 * (c * a);
      break;
    }
    case 4: {                     /* Case E */
      val = b;
      break;
    }
    default:
      val = a;
    }
    ,*dest = val;
  }
#+END_SRC
* Practice Problem 3.32
  first(10) in main.
  | Instruction |          |             | State values (at beginning) |      |      |                |          | ---                   |
  | Label       |       PC | Instruction | %rdi                        | %rsi | %rax | %rsp           |    *%rsp | Description           |
  |-------------+----------+-------------+-----------------------------+------+------+----------------+----------+-----------------------|
  | M1          | 0x400560 | callq       | 10                          | -    | -    | 0x7fffffffe820 |        - | Call first(10)        |
  | F1          | 0x400548 | lea         | 10                          | -    | -    | Ox7fffffffe818 | 0x400560 | Entry of first        |
  | F2          | 0x40054C | sub         | -                           | 11   | -    | Ox7fffffffe818 | 0x400560 | Resume first          |
  | F3          | 0x400550 | callq       | 10                          | -    | -    | Ox7fffffffe818 | 0x400560 | Call last(10, 11)     |
  | L1          | 0x400540 | mov         | 10                          | -    | -    | Ox7fffffffe810 | 0x400555 | Resume last           |
  | L2          | 0x400543 | imul        | -                           | -    | 10   | Ox7fffffffe810 | 0x400555 | Resume last           |
  | L3          | 0x400547 | retq        | -                           | -    | 110  | Ox7fffffffe810 | 0x400555 | Return 110 from last  |
  | F4          | 0x400555 | repz        | -                           | -    | 110  | Ox7fffffffe818 | 0x400560 | Return 110 from first |
  | M2          | 0x400565 | mov         | -                           | -    | 110  | 0x7fffffffe820 |        - | Resume main           |
* Practice Problem 3.33
  Arguments: ~u a v b~
  u: ~int~
  a: ~char~
  v: ~long~
  b: ~long~
* Practice Problem 3.34
** A
  ~%r15~, ~%r14~, ~%r13~, ~%r12~, ~%rbp~ and ~%rbx~.
** B
  ~%rax~ and ~%rdx~.
** C
  Because of the limit on the number of callee-saved registers.
* Practice Problem 3.35
** A
  x value;
** B
#+NAME ex35
#+BEGIN_SRC C
  long rfun(unsigned long x) {
    if (x == 0) {
      return x;
    }
    unsigned long nx = x >> 2;
    long rv = rfun(nx);
    return x;
  }
#+END_SRC
* Practice Problem 3.36
  | Array | Element size | Total size | Start address | Element i |
  |-------+--------------+------------+---------------+-----------|
  | S     |            2 |         14 | x_S            | x_S + 2i   |
  | T     |            8 |         24 | x_T            | x_T + 8i   |
  | U     |            8 |         48 | x_U            | x_U + 8i   |
  | V     |            4 |         32 | x_V            | x_V + 4i   |
  | W     |            8 |         32 | x_W            | x_W + 8i   |
* Practice Problem 3.37
  x_S = short (%rdx)
  i = long (%rcx)
  result = %rax (%ax)

  | Expression | Type   | Value      | Assembly Code              |
  |------------+--------+------------+----------------------------|
  | S+1        | short* | x_s+2       | leaq 2(%rdx),%rax          |
  | S[3]       | short  | M[x_s+6]    | movw 6(%rdx),%ax           |
  | &S[i]      | short* | x_s+2i      | leaq (%rdx,%rcx,2),%rax    |
  | S[4*i+1]   | short  | M[x_s+8i+2] | movw 2(%rdx,%rcx,8),%ax    |
  | S+i-5      | short* | x_s+2i-10   | leaq -10(%rdx,%rcx,2),%rax |
* Practice Problem 3.38
  ~long P[M][N];~
  ~long Q[N][M];~

  M[x_q + 8 (5j + i)] -> 5
  N[x_p + 8 (7i + j)] -> 7

  M = 5 and N = 7
* Practice Problem 3.39
  line 3:
  k=0
  x_a+4(16i+k) -> x_a+64i+4k -> x_a+64i+4*0 -> x_A+64i

  line 4:
  i=0
  x_b+4(16i+k) -> x_B+64i+4k -> x_a+64*0+4k -> x_b+4k

  line 5:
  i=16
  x_b+4(16i+k) -> x_b+64i+4k -> x_a+64*16+4k -> x_b+1024+4k
* Practice Problem 3.40
#+NAME ex40
#+BEGIN_SRC C
  #include <stdio.h>

  #define N 16
  typedef int fix_matrix[N][N];

  void fix_set_diag(fix_matrix A, int val) {
    long i;
    for (i = 0; i < N; i++) {
      A[i][i] = val;
    }
  }

  void fix_set_diag_opt(fix_matrix A, int val) {
    int *Aptr = &A[0][0];
    int *Aend = &A[N][N];
    do {
      ,*Aptr = val;
      Aptr++;
      Aptr += N;
    } while (Aptr != Aend);
  }

  int main() {
    fix_matrix a = {NULL};
    fix_matrix b = {NULL};
    int val = 16;

    fix_set_diag(a, 16);
    fix_set_diag_opt(b, 16);

    int i;
    int c;
    for (i = 0; i < N; i++) {
      printf("[%d | %d]\n", a[i][i], b[i][i]);
      for (c = 0; c < N; c++) {
        if (a[i][c] != b[i][c]) {
          printf("They're not the same");
          return 1;
        }
      }
    }

    return 0;
  }
#+END_SRC

#+RESULTS:
| [16 |   |   | 16] |
| [16 |   |   | 16] |
| [16 |   |   | 16] |
| [16 |   |   | 16] |
| [16 |   |   | 16] |
| [16 |   |   | 16] |
| [16 |   |   | 16] |
| [16 |   |   | 16] |
| [16 |   |   | 16] |
| [16 |   |   | 16] |
| [16 |   |   | 16] |
| [16 |   |   | 16] |
| [16 |   |   | 16] |
| [16 |   |   | 16] |
| [16 |   |   | 16] |
| [16 |   |   | 16] |
* Practice Problem 3.41
  0   8   12    16
 *p  s.x  s.y  *next
** A
  p:     0
  s.x:   8
  s.y:   12
  *next: 16
** B
  24
** C
#+NAME ex41
#+BEGIN_SRC C
  void sp_init(struct prob *sp) {
    sp->s.x = sp->s.y;
    sp->p = sp->s.x;
    sp->next = sp->p;
  }
#+END_SRC
* Practice Problem 3.42
** A
#+NAME ex42
#+BEGIN_SRC C
  struct ELE {
    long v;
    struct ELE *p;
  };

  long fun(struct ELE *ptr) {
    long result = 0;
    while (ptr) {
      result += ptr->v;
      ptr = ptr->p;
    }
    return result;
  }
#+END_SRC
** B
  It's a Linked List.
* Practice Problem 3.43
  | expr               | type  | Code                       |
  |--------------------+-------+----------------------------|
  | up->t1.u           | long  | movq (%rdi), %rax          |
  |                    |       | movq %rax, (%rsi)          |
  | up->t1.v           | short | movw 8(%rdi), %ax          |
  |                    |       | movw %ax, (%rsi)           |
  | &up->t1.w          | char* | addq $10, %rdi             |
  |                    |       | movq %rdi, (%rsi)          |
  | up->t2.a           | int*  | movq %rdi, (%rsi)          |
  | up->t2.a[up->t1.u] | int   | movq (%rdi), %rax          |
  |                    |       | movl (%rdi, %rax, 4), %eax |
  |                    |       | movl %eax, (%rsi)          |
  | *up->t2.p          | char  | movq 8(%rdi), %rax         |
  |                    |       | movb (%rax), %al           |
  |                    |       | movb %al, (%rsi)           |
* Practice Problem 3.44
** A
  | 4 | 1+3 | 4 | 1+3 |
  Alignment 4, offset of 6 bytes and total of 16 bytes.
** B
  | 4 | 1 | 1+2 | 8 |
  Alignment 8, offset of 2 bytes and total of 16 bytes.
** C
  | 2*3 | 1*3+1 |
  Alignment 2, offset 1 byte and total of 10 bytes.
** D
  | 2*5+6 | 8*3 |
  Alignment 8, offset 6 bytes and total of 40 bytes.
** E
  | 10*2+4 | 16 |
  Alignment 8, offset 4 bytes and total of 40 bytes.
* Practice Problem 3.45
** A
  | 8 | 2+6 | 8 | 1+3 | 4 | 1+7 | 8 | 4+4 |
  Offset of 20 bytes with alignment 8.
** B
  Total of 56 bytes.
** C
#+NAME ex45
#+BEGIN_SRC C
  struct {
    char   *a;
    double  c;
    long    g;
    float   e;
    int     h;
    short   b;
    char    d;
    char    f;
  } rec;
#+END_SRC
  | 8 | 8 | 8 | 4 | 4 | 2 | 1 | 1+4 |
  Total of 40 bytes.
  Alignment 8 and 4 bytes of offset.
* Practice Problem 3.46
  [[file:ex46.c][Code]]
** A
  | 00 00 00 00 00 40 00 76 | Return address |
  | 01 23 45 67 89 AB CD EF | Saved %rbx     |
** B
  | 00 00 00 00 00 40 00 34 | Return address |
  | 33 32 31 30 39 38 37 36 | Saved %rbx     |
  | 35 34 33 32 21 30 39 38 |                |
  | 37 36 35 34 33 32 31 30 | buf = %rsp     |
** C
  The address 0x040034.
** D
  The %rbx with value 0x3332313039383736.
** E
  The malloc with strlen(buf)+1; and
  check for NULL.
* Practice Problem 3.47
** A
  2^{13} = 8192 addresses.
** B
  2⁶ = 64 addresses.
