* Homework Problem 2.55
  Ok
* Homework Problem 2.56
  Ok
* Homework Problem 2.57
  ~./cs-app/code/data/show-bytes.c~ : [[file:~/Documents/Git/study/cs-app/code/data/show-bytes.c][show_bytes.c]]
#+NAME hp57
#+BEGIN_SRC C
  void show_short(short x) {
    show_bytes((byte_pointer) &x, sizeof(short));
  }

  void show_long(long x) {
    show_bytes((byte_pointer) &x, sizeof(long));
  }

  void show_double(double x) {
    show_bytes((byte_pointer) &x, sizeof(double));
  }

  /* Homework 2.57 */
  printf("Homework 2.57\n");
  show_short(5);
  show_long(5);
  show_double(5.0);
#+END_SRC
* Homework Problem 2.58
#+NAME ex58
#+BEGIN_SRC C
  #include <stdio.h>

  int is_little_endian() {
    unsigned int x = 1;
    return (x & 0xFF) == 1;
  }

  int main() {
    printf("Is little endian? %d\n", is_little_endian());

    return 0;
  }
#+END_SRC

#+RESULTS:
: Is little endian? 1

* Homework Problem 2.59
#+NAME ex59
#+BEGIN_SRC C
  #include <stdio.h>

  int main() {
   /* Homework 2.59 */
    printf("Homework 2.59\n");
    printf("x=0x89ABCDEF and y=0x76543210 -> 0x765432EF\n");
    printf("%X\n", (0x89ABCDEF & 0xFF) | (0x76543210 & 0xFFFFFF00));

    return 0;
  }
#+END_SRC

#+RESULTS:
| Homework     | 2.59 |              |    |            |
| x=0x89ABCDEF |  and | y=0x76543210 | -> | 0x765432EF |
| 765432EF     |      |              |    |            |
* Homework Problem 2.60
#+NAME ex60
#+BEGIN_SRC C
  #include <assert.h>

  unsigned replace_byte(unsigned x, int i, unsigned char b) {
    int pos = (sizeof(int)) * 2 * i;
    int mask = ~(0xFF << pos);
    return (x & mask) | (b << pos);
  }

  int main() {
    assert(replace_byte(0x12345678, 2, 0xAB) == 0x12AB5678);
    assert(replace_byte(0x12345678, 0, 0xAB) == 0x123456AB);

    return 0;
  }

#+END_SRC

#+RESULTS:

* Homework Problem 2.61
#+NAME ex61
#+BEGIN_SRC C :flags -lm
  #include <stdio.h>
  #include <math.h>
  #include <assert.h>

  /* produces 1 when any bit in stream is 1 */
  int anyBit1(int x, int i) {
    return (x & (int)(pow(2, i))) > 0;
  }

  /* produces 1 when any bit in stream is 0 */
  int anyBit0(int x, int i) {
    return (x & (int)(pow(2, i))) == 0;
  }

  /* produces 1 when any bit in LSB of stream is 1 */
  int anyBit1InLSB(int x, int i) {
    if (i > (sizeof(int) - 1) << 1) {
      return 0;
    }
    return anyBit1(x, i);
  }

  /* produces 1 when any bit in MSB of stream is 0 */
  int anyBit0InMSB(int x, int i) {
    if (i < (sizeof(int) - 1) << 3) {
      return 0;
    }
    return anyBit0(x, i);
  }

  /* checks each bit of x with the pointer function */
  int checkBitsBy(int (*func)(int, int), int x) {
    int i;
    for (i = 0; i < (sizeof (int)) * 8; i++) {
      if (func(x, i)) {
        return 1;
      }
    }
    return 0;
  }

  void tests() {
    /* anyBit1 */
    assert(checkBitsBy(anyBit1, 5) == 1);
    assert(checkBitsBy(anyBit1, 0) == 0);

    /* anyBit0 */
    assert(checkBitsBy(anyBit0, 0) == 1);
    assert(checkBitsBy(anyBit0, -1) == 0);

    /* anyBit1InLSB */
    assert(checkBitsBy(anyBit1InLSB, 0x000000FF) == 1);
    assert(checkBitsBy(anyBit1InLSB, 0xFFFFFF00) == 0);

    /* anyBit0InMSB */
    assert(checkBitsBy(anyBit0InMSB, 0x00FFFFFF) == 1);
    assert(checkBitsBy(anyBit0InMSB, 0xFF000000) == 0);
  }

  int main() {
    tests();

    /* A */
    printf("%d\n", checkBitsBy(anyBit1, 5));
    printf("%d\n", checkBitsBy(anyBit1, 0));

    /* B */
    printf("%d\n", checkBitsBy(anyBit0, 0));
    printf("%d\n", checkBitsBy(anyBit0, -1));

    /* C */
    printf("%d\n", checkBitsBy(anyBit1InLSB, 0x000000FF));
    printf("%d\n", checkBitsBy(anyBit1InLSB, 0xFFFFFF00));

    /* D */
    printf("%d\n", checkBitsBy(anyBit0InMSB, 0x00FFFFFF));
    printf("%d\n", checkBitsBy(anyBit0InMSB, 0xFF000000));

    return 0;
  }

#+END_SRC

#+RESULTS:
| 1 |
| 0 |
| 1 |
| 0 |
| 1 |
| 0 |
| 1 |
| 0 |
* Homework Problem 2.62
#+NAME ex62
#+BEGIN_SRC C
  #include <stdio.h>
  #include <limits.h>

  int int_shift_are_arithmetic() {
    return (INT_MIN >> 1) < 0;
  }

  int main() {
    printf("Arithmetic Shift? %d\n", int_shift_are_arithmetic());

    return 0;
  }

#+END_SRC

#+RESULTS:
: Arithmetic Shift? 1
