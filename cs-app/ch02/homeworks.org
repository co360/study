* Homework Problem 2.55
  Ok.
* Homework Problem 2.56
  Ok.
* Homework Problem 2.57
  ~./cs-app/code/data/show-bytes.c~ : [[file:../code/data/show-bytes.c][show-bytes.c]]
#+NAME hp57
#+BEGIN_SRC C
  void show_short(short x) {
    show_bytes((byte_pointer) &x, sizeof(short));
  }

  void show_long(long x) {
    show_bytes((byte_pointer) &x, sizeof(long));
  }

  void show_double(double x) {
    show_bytes((byte_pointer) &x, sizeof(double));
  }

  /* Homework 2.57 */
  printf("Homework 2.57\n");
  show_short(5);
  show_long(5);
  show_double(5.0);
#+END_SRC
* Homework Problem 2.58
#+NAME ex58
#+BEGIN_SRC C
  #include <stdio.h>

  int is_little_endian() {
    unsigned int x = 1;
    return (x & 0xFF) == 1;
  }

  int main() {
    printf("Is little endian? %d\n", is_little_endian());

    return 0;
  }
#+END_SRC

#+RESULTS:
: Is little endian? 1

* Homework Problem 2.59
#+NAME ex59
#+BEGIN_SRC C
  #include <stdio.h>

  int main() {
    printf("x=0x89ABCDEF and y=0x76543210 -> 0x765432EF\n");
    printf("0x%X\n", (0x89ABCDEF & 0xFF) | (0x76543210 & 0xFFFFFF00));

    return 0;
  }
#+END_SRC

#+RESULTS:
| x=0x89ABCDEF | and | y=0x76543210 | -> | 0x765432EF |
|   0x765432EF |     |              |    |            |

* Homework Problem 2.60
#+NAME ex60
#+BEGIN_SRC C
  #include <stdio.h>
  #include <assert.h>

  unsigned replace_byte(unsigned x, int i, unsigned char b) {
    int pos = sizeof(int) * 2 * i;
    int mask = ~(0xFF << pos);
    return (x & mask) | (b << pos);
  }

  void tests() {
    assert(replace_byte(0x12345678, 2, 0xAB) == 0x12AB5678);
    assert(replace_byte(0x12345678, 0, 0xAB) == 0x123456AB);
  }

  int main() {
    tests();

    printf("0x%X == 0x12AB5678\n", replace_byte(0x12345678, 2, 0xAB));
    printf("0x%X == 0x123456AB\n", replace_byte(0x12345678, 0, 0xAB));

    return 0;
  }
#+END_SRC

#+RESULTS:
| 0x12AB5678 | == | 0x12AB5678 |
| 0x123456AB | == | 0x123456AB |

* Homework Problem 2.61
#+NAME ex61
#+BEGIN_SRC C
  #include <stdio.h>
  #include <assert.h>

  /* produces 1 when any bit in stream is 1 */
  int anyBit1(int x) {
    x |= x >> 1;
    x |= x >> 2;
    x |= x >> 4;
    x |= x >> 8;
    x |= x >> 16;
    return x & 1;
  }

  /* produces 1 when any bit in stream is 0 */
  int anyBit0(int x) {
    x |= x >> 1;
    x |= x >> 2;
    x |= x >> 4;
    x |= x >> 8;
    x |= x >> 16;
    return ~x & 1;
  }

  /* produces 1 when any bit in LSB of stream is 1 */
  int anyBit1InLSB(int x) {
    x &= 0xFF;
    x |= x >> 1;
    x |= x >> 2;
    x |= x >> 4;
    x |= x >> 8;
    return x & 1;
  }

  /* produces 1 when any bit in MSB of stream is 0 */
  int anyBit0InMSB(int x) {
    x &= 0xFF000000;
    x >>= 24;
    x &= 0xFF;
    x |= x >> 1;
    x |= x >> 2;
    x |= x >> 4;
    x |= x >> 8;
    return ~x & 1;
  }

  void tests() {
    /* anyBit1 */
    assert(anyBit1(5) == 1);
    assert(anyBit1(0) == 0);

    /* anyBit0 */
    assert(anyBit0(0) == 1);
    assert(anyBit0(-1) == 0);

    /* anyBit1InLSB */
    assert(anyBit1InLSB(0x000000FF) == 1);
    assert(anyBit1InLSB(0xFFFFFF00) == 0);

    /* anyBit0InMSB */
    assert(anyBit0InMSB(0x00FFFFFF) == 1);
    assert(anyBit0InMSB(0xFF000000) == 0);
    assert(anyBit0InMSB(0x80000000) == 0);
  }

  int main() {
    tests();

    /* A */
    printf("%d\n", anyBit1(5));
    printf("%d\n", anyBit1(0));

    /* B */
    printf("%d\n", anyBit0(0));
    printf("%d\n", anyBit0(-1));

    /* C */
    printf("%d\n", anyBit1InLSB(0x000000FF));
    printf("%d\n", anyBit1InLSB(0xFFFFFF00));

    /* D */
    printf("%d\n", anyBit0InMSB(0x00FFFFFF));
    printf("%d\n", anyBit0InMSB(0xFF000000));
    printf("%d\n", anyBit0InMSB(0x80000000));

    return 0;
  }
#+END_SRC

#+RESULTS:
| 1 |
| 0 |
| 1 |
| 0 |
| 1 |
| 0 |
| 1 |
| 0 |
| 0 |

* Homework Problem 2.62
#+NAME ex62
#+BEGIN_SRC C
  #include <stdio.h>
  #include <limits.h>

  int int_shift_are_arithmetic() {
    return (INT_MIN >> 1) < 0;
  }

  int main() {
    printf("Arithmetic Shift? %d\n", int_shift_are_arithmetic());

    return 0;
  }
#+END_SRC

#+RESULTS:
: Arithmetic Shift? 1

* Homework Problem 2.63
#+NAME ex63
#+BEGIN_SRC C
  #include <stdio.h>
  #include <assert.h>
  #include <limits.h>

  /* Perform shift arithmetically */
  unsigned srl(unsigned x, int k) {
    unsigned xsra = (int) x >> k;
    int size = 8 * sizeof(unsigned);

    if ((x & 1 << size - 1) > 0) {
      int i;
      for (i = 1; i <= k; i++) {
        xsra -= 1 << size - i;
      }
    }

    return xsra;
  }

  /* Perform shift logically */
  int sra(int x, int k) {
    int xsrl = (unsigned) x >> k;
    int size = 8 * sizeof(int);

    if ((x & 1 << size - 1) > 0) {
      int i;
      for (i = 1; i <= k; i++) {
        xsrl += 1 << size - i;
      }
    }

    return xsrl;
  }

  void tests() {
    assert(srl(UINT_MAX, 2) == UINT_MAX >> 2);
    assert(sra(INT_MAX, 2) == INT_MAX >> 2);
  }

  int main() {
    tests();

    printf("%u\n", srl(UINT_MAX, 2));
    printf("%d\n", sra(INT_MAX, 2));

    return 0;
  }
#+END_SRC

#+RESULTS:
| 1073741823 |
|  536870911 |

* Homework Problem 2.64
#+NAME ex64
#+BEGIN_SRC C
  #include <stdio.h>
  #include <assert.h>

  /* Return 1 when any odd bit of x equals 1; 0 otherwise. Assume w=32 */
  int any_odd_one(unsigned x) {
    int result = x & 0x55555555;
    result = (result & 0xFF000000) >> 8 | (result & 0xFF0000) >> 8 | (result & 0xFF00) >> 8 | (result & 0xFF);
    result = (result & 0xF0) >> 4 | (result & 0xF);
    result = (result & 0xC) >> 2 | (result & 0x3);
    result = (result & 0x2) >> 1 | (result & 0x1);
    return result & 1;
  }

  void tests() {
    assert(any_odd_one(84) == 1);
    assert(any_odd_one(2) == 0);
    assert(any_odd_one(0) == 0);
  }

  int main() {
    tests();

    printf("%d\n", any_odd_one(84));
    printf("%d\n", any_odd_one(2));
    printf("%d\n", any_odd_one(0));

    return 0;
  }
#+END_SRC

#+RESULTS:
| 1 |
| 0 |
| 0 |

* Homework Problem 2.65
#+NAME ex65
#+BEGIN_SRC C
  #include <stdio.h>
  #include <assert.h>

  /* Return 1 when x contains an odd number of 1s; 0 otherwise. Assume w=32 */
  int odd_ones(unsigned x) {
    x ^= x >> 16;
    x ^= x >> 8;
    x ^= x >> 4;
    x ^= x >> 2;
    x ^= x >> 1;
    return x & 1;
  }

  void tests() {
    assert(odd_ones(0x80000000) == 1);
    assert(odd_ones(0b10101) == 1);
    assert(odd_ones(0b10001) == 0);
  }

  int main() {
    tests();

    printf("%d\n", odd_ones(0x80000000));
    printf("%d\n", odd_ones(0b10101));
    printf("%d\n", odd_ones(0b10001));

    return 0;
  }
#+END_SRC

#+RESULTS:
| 1 |
| 1 |
| 0 |

* Homework Problem 2.66
#+NAME ex66
#+BEGIN_SRC C
  #include <stdio.h>
  #include <assert.h>

  /*
   ,* Generate mask indicating leftmost 1 in x. Assume w=32.
   ,* For example, 0xFF00 -> 0x8000, and 0x6600 -> 0x4000.
   ,* If x = 0, then return 0.
   ,*/
  int leftmost_one(unsigned x) {
    x |= x >> 1;
    x |= x >> 2;
    x |= x >> 4;
    x |= x >> 8;
    x |= x >> 16;
    return x ^ (x >> 1);
  }

  void tests() {
    assert(leftmost_one(0) == 0x0);
    assert(leftmost_one(0xFF00) == 0x8000);
    assert(leftmost_one(0x6600) == 0x4000);
  }

  int main() {
    tests();

    printf("0x%X\n", leftmost_one(0));
    printf("0x%X\n", leftmost_one(0xFF00));
    printf("0x%X\n", leftmost_one(0x6600));

    return 0;
  }
#+END_SRC

#+RESULTS:
|    0x0 |
| 0x8000 |
| 0x4000 |

* Homework Problem 2.67
** A
  Overflow in ~1 << 32~.
** B
  Ok.
** C
  Ok.
** Code
#+NAME ex67
#+BEGIN_SRC C
  #include <stdio.h>

  /* The following code does not run properly on some machines */
  int bad_int_size_is_32() {
    /* Set most significant bit (msb) of 32-bit machine */
    int set_msb = 1 << 31;
    /* Shift past msb of 32-bit word */
    int beyond_msb = 1 << 32;

    /* set_msb is nonzero when word size >= 32
       beyond_msb is zero when word size <= 32 */
    return set_msb && !beyond_msb;
  }

  int int_size_is_32() {
    unsigned set_msb = 1 << 31;
    unsigned beyond_msb = set_msb - ~set_msb - 1;
    return set_msb && !beyond_msb;
  }

  int int_size_is_16() {
    unsigned short set_msb = 1 << 15;
    unsigned short beyond_msb = set_msb - ~set_msb - 1;
    return set_msb && !beyond_msb;
  }

  int main() {
    printf("%d\n", bad_int_size_is_32());
    printf("%d\n", int_size_is_32());
    printf("%d\n", int_size_is_16());

    return 0;
  }
#+END_SRC

#+RESULTS:
| 1 |
| 1 |
| 1 |

* Homework Problem 2.68
#+NAME ex68
#+BEGIN_SRC C
  #include <stdio.h>
  #include <assert.h>

  /*
   ,* Mask with least signficant n bits set to 1
   ,* Examples: n = 6 --> 0x3F, n = 17 --> 0x1FFFF
   ,* Assume 1 <= n <= w
   ,*/
  int lower_one_mask(int n) {
    int result;
    int i;

    for (i = 0; i < n; i++) {
      result |= 1 << i;
    }

    return result;
  }

  void tests() {
    assert(lower_one_mask(6) == 0x3F);
    assert(lower_one_mask(17) == 0x1FFFF);
  }

  int main() {
    tests();

    printf("0x%X\n", lower_one_mask(6));
    printf("0x%X\n", lower_one_mask(17));

    return 0;
  }
#+END_SRC

#+RESULTS:
|    0x3F |
| 0x1FFFF |
* Homework Problem 2.69
#+NAME ex69
#+BEGIN_SRC C
  #include <stdio.h>
  #include <assert.h>

  /*
   ,* Do rotating left shift. Assume 0 <= n < w
   ,* Examples when x = 0x12345678 and w = 32:
   ,*    n=4 -> 0x23456781, n=20 -> 0x67812345
   ,*/
  unsigned rotate_left(unsigned x, int n) {
    unsigned w = 8 * sizeof(unsigned);
    unsigned mask = 1 << w - 1;

    int result = x;
    int bit;
    int i;
    for (i = 0; i < n; i++) {
      bit = (result & mask) >> w - 1;
      result = result << 1 | bit;
    }

    return result;
  }

  void tests() {
    assert(rotate_left(0x12345678, 0) == 0x12345678);
    assert(rotate_left(0x12345678, 4) == 0x23456781);
    assert(rotate_left(0x12345678, 20) == 0x67812345);
  }

  int main() {
    tests();

    printf("0x%X\n", rotate_left(0x12345678, 0));
    printf("0x%X\n", rotate_left(0x12345678, 4));
    printf("0x%X\n", rotate_left(0x12345678, 20));

    return 0;
  }
#+END_SRC

#+RESULTS:
| 0x12345678 |
| 0x23456781 |
| 0x67812345 |
* Homework Problem 2.70
#+NAME ex70
#+BEGIN_SRC C
  #include <stdio.h>
  #include <assert.h>

  /*
   ,* Return 1 when x can be represented as an n-bit, 2's-complement
   ,* number; 0 otherwise
   ,* Assume 1 <= n <= w
   ,*/
  int fits_bits(int x, int n) {
    return x < 1 << n;
  }

  void tests() {
    assert(fits_bits(10, 8) == 1);
    assert(fits_bits(256, 8) == 0);
  }

  int main() {
    tests();

    printf("%d\n", fits_bits(10, 8));
    printf("%d\n", fits_bits(256, 8));

    return 0;
  }
#+END_SRC

#+RESULTS:
| 1 |
| 0 |
* Homework Problem 2.71
** A
  It does not convert the data to two's complement.
** B
  Ok.
** Code
#+NAME ex71
#+BEGIN_SRC C
  #include <stdio.h>
  #include <assert.h>

  /* Declaration of data type where 4 bytes are packed into an unsigned */
  typedef unsigned packed_t;

  /* Extract byte from word. Return as signed integer */
  int xbyte(packed_t word, int bytenum);

  /* Failed attempt at xbyte */
  /* int xbyte(packed_t word, int bytenum) { */
  /*   return (word >> (bytenum << 3)) & 0xFF; */
  /* } */

  int xbyte(packed_t word, int bytenum) {
    return ((word << (3 - bytenum << 3)) >> (3 << 3)) - 128;
  }

  void tests() {
    packed_t pkg = (unsigned) (128 - 128 << (3 << 3)) +
      (128 - 50 << (2 << 3)) +
      (128 + 127 << (1 << 3)) +
      (128 - 1 << (0 << 3));

    assert(xbyte(pkg, 0) == -1);
    assert(xbyte(pkg, 1) == 127);
    assert(xbyte(pkg, 2) == -50);
    assert(xbyte(pkg, 3) == -128);
  }

  int main() {
    tests();

    packed_t pkg = (unsigned) (128 - 128 << (3 << 3)) +
      (128 - 50 << (2 << 3)) +
      (128 + 127 << (1 << 3)) +
      (128 - 1 << (0 << 3));
    printf("%d\n", xbyte(pkg, 0));
    printf("%d\n", xbyte(pkg, 1));
    printf("%d\n", xbyte(pkg, 2));
    printf("%d\n", xbyte(pkg, 3));

    return 0;
  }
#+END_SRC

#+RESULTS:
|   -1 |
|  127 |
|  -50 |
| -128 |
* Homework Problem 2.72
** A
  The expression is encoded as unsigned (always positive), because the sizeof operator returns an unsigned type.
** B
  Ok.
** Code
#+NAME ex72
#+BEGIN_SRC C
  #include <stdio.h>
  #include <string.h>

  /* Copy integer into buffer if space is available */
  /* WARNING: The following code is buggy */
  /* FIXED */
  void copy_int(int val, void *buf, int maxbytes) {
    int bytes = maxbytes - sizeof(val);
    if (bytes >= 0) {
      memcpy(buf, (void *) &val, sizeof(val));
    }
  }

  int main() {
    int in = -2;
    int result;
    short noresult = 5;

    copy_int(in, &result, 4);
    printf("%d\n", in);
    printf("%d\n", result);

    copy_int(in, &noresult, 2);
    printf("%d\n", in);
    printf("%d\n", noresult);

    return 0;
  }
#+END_SRC

#+RESULTS:
| -2 |
| -2 |
| -2 |
|  5 |
* Homework Problem 2.73
#+NAME ex73
#+BEGIN_SRC C
  #include <stdio.h>
  #include <limits.h>
  #include <assert.h>

  /* Addition that saturates to TMin or TMax */
  int saturating_add(int x, int y) {
    int result = x + y;
    if (x > 0 && y > 0 && result <= 0) {
      return INT_MAX;
    } else if (x < 0 && y < 0 && result >= 0) {
      return INT_MIN;
    }
    return result;
  }

  void tests() {
    assert(saturating_add(INT_MAX, 1) == INT_MAX);
    assert(saturating_add(INT_MIN, -1) == INT_MIN);
    assert(saturating_add(1, 1) == 2);
  }

  int main() {
    tests();

    printf("%d\n", saturating_add(INT_MAX, 1));
    printf("%d\n", saturating_add(INT_MIN, -1));
    printf("%d\n", saturating_add(1, 1));

    return 0;
  }
#+END_SRC

#+RESULTS:
|  2147483647 |
| -2147483648 |
|           2 |
* Homework Problem 2.74
#+NAME ex74
#+BEGIN_SRC C
  #include <stdio.h>
  #include <limits.h>

  /* Determine whether arguments can be subtracted without overflow */
  int tsub_ok(int x, int y) {
    int result = x - y;
    return (x > y && result < x) || (x < y && result > y);
  }

  int main() {
    printf("%d\n", tsub_ok(1, 1));
    printf("%d\n", tsub_ok(INT_MIN, 1));
    printf("%d\n", tsub_ok(INT_MAX, -1));

    return 0;
  }
#+END_SRC

#+RESULTS:
| 0 |
| 1 |
| 1 |
* Homework Problem 2.75
#+NAME ex75
#+BEGIN_SRC C
  #include <stdio.h>
  #include <limits.h>

  int signed_high_prod(int x, int y) {
    int result = (x * y) % (1 << (sizeof(int) * 8 - 1));
    return result;
  }

  unsigned unsigned_high_prod(unsigned x, unsigned y) {
    return signed_high_prod(x, y);
  }

  int main() {
    printf("%u\n", unsigned_high_prod(2, 4));
    printf("%u\n", unsigned_high_prod(UINT_MAX, 1));
    printf("%d\n", signed_high_prod(2, -4));

    return 0;
  }
#+END_SRC

#+RESULTS:
|          8 |
|         -8 |
| 4294967295 |
| 4294967295 |
* Homework Problem 2.76
#+NAME ex76
#+BEGIN_SRC C
  #include <stdio.h>
  #include <string.h>
  #include <stdlib.h>

  void *calloc(size_t nmemb, size_t size) {
    size_t total = nmemb * size;

    if (total != 0 && total / nmemb != size) {
      return NULL;
    }

    void *ptr = malloc(total);
    if (ptr == 0) {
      return NULL;
    } else {
      memset(ptr, 0, total);
      return ptr;
    }
  }

  int main() {
    char *res = calloc(2, 1);
    printf("%d\n", *(res + 0));
    printf("%d\n", *(res + 1));
    printf("%d\n", *(res + 2));

    return 0;
  }
#+END_SRC

#+RESULTS:
| 0 |
| 0 |
| 0 |
* Homework Problem 2.77
#+NAME ex77
#+BEGIN_SRC C
  #include <stdio.h>

  int main() {
    int x = 32;

    int ka = 17;
    int kb = -7;
    int kc = 60;
    int kd = -112;

    printf("%d = %d\n", x * ka, (x << 4) + x);
    printf("%d = %d\n", x * kb, -(x << 3) + x);
    printf("%d = %d\n", x * kc, (x << 5) + (kc << 4) - x - x);
    printf("%d = %d\n", x * kd, -(x << 7) - (kd << 2) + x + x);

    return 0;
  }
#+END_SRC

#+RESULTS:
|   544 | = |   544 |
|  -224 | = |  -224 |
|  1920 | = |  1920 |
| -3584 | = | -3584 |
* Homework Problem 2.78
#+NAME ex78
#+BEGIN_SRC C
  #include <stdio.h>
  #include <assert.h>

  /* Divide by power of 2. Assume 0 <= k < w-1 */
  int divide_power2(int x, int k) {
    int w = 8 * sizeof(int) - 1;
    int sign = (x & (1 << w)) >> w == 0;
    int mask = (1 << k) - 1;
    int bias = (mask + sign) & mask;
    return (x + bias) >> k;
  }

  void tests() {
    assert(divide_power2(4, 2) == 1);
    assert(divide_power2(-4, 2) == -1);
    assert(divide_power2(15, 2) == 3);
    assert(divide_power2(-15, 2) == -3);
  }

  int main() {
    tests();

    printf("%d\n", divide_power2(4, 2));
    printf("%d\n", divide_power2(-4, 2));
    printf("%d\n", divide_power2(15, 2));
    printf("%d\n", divide_power2(-15, 2));

    return 0;
  }
#+END_SRC

#+RESULTS:
|  1 |
| -1 |
|  3 |
| -3 |
* Homework Problem 2.79
#+NAME ex79
#+BEGIN_SRC C
  #include <stdio.h>
  #include <stdlib.h>
  #include <limits.h>
  #include <assert.h>

  /* Multiply by 3 and divide by 4 */
  int mult3div4(int x) {
    int w = 8 * sizeof(int) - 1;
    int64_t p = 3 * (int64_t)(x);
    int sign = (x & (1 << w)) >> w != 0;
    int of = (1 << w) - (p == (int)(3 * x)) | (1 << w);

    return (((x << 1) + x) >> 2) + sign & of;
  }

  void tests() {
    assert(mult3div4(10) == 3 * 10 / 4);
    assert(mult3div4(-10) == 3 * -10 / 4);
    assert(mult3div4(30) == 3 * 30 / 4);
    assert(mult3div4(INT_MAX) == 0);
  }

  int main() {
    tests();

    printf("%d = %d\n", 3 * 10 / 4, mult3div4(10));
    printf("%d = %d\n", 3 * -10 / 4, mult3div4(-10));
    printf("%d = %d\n", 3 * 30 / 4, mult3div4(30));
    printf("%d = %d\n", (long)(3) * INT_MAX / 4 , mult3div4(INT_MAX));

    return 0;
  }
#+END_SRC

#+RESULTS:
|          7 | = |  7 |
|         -7 | = | -7 |
|         22 | = | 22 |
| 1610612735 | = |  0 |
* Homework Problem 2.80
#+NAME ex80
#+BEGIN_SRC C
  #include <stdio.h>
  #include <stdlib.h>
  #include <limits.h>
  #include <assert.h>

  /* Computes the 3/4 of x */
  int threefourths(int x) {
    int w = 8 * sizeof(int) - 1;
    int64_t p = 3 * (int64_t)(x);
    int sign = (x & (1 << w)) >> w != 0;
    int of = (1 << w) - (p == (int)(3 * x)) | (1 << w);

    return (((x << 1) + x) >> 2) + sign & of;
  }

  void tests() {
    assert(threefourths(10) == (int)(3.0 / 4 * 10));
    assert(threefourths(-10) == (int)(3.0 / 4 * -10));
    assert(threefourths(30) == (int)(3.0 / 4 * 30));
    assert(threefourths(INT_MAX) == 0);
  }

  int main() {
    tests();

    printf("%d = %d\n", (int)(3.0 / 4 * 10), threefourths(10));
    printf("%d = %d\n", (int)(3.0 / 4 * -10), threefourths(-10));
    printf("%d = %d\n", (int)(3.0 / 4 * 30), threefourths(30));
    printf("%d = %d\n", (long)(3.0 / 4 * INT_MAX), threefourths(INT_MAX));

    return 0;
  }
#+END_SRC

#+RESULTS:
|          7 | = |  7 |
|         -7 | = | -7 |
|         22 | = | 22 |
| 1610612735 | = |  0 |
* Homework Problem 2.81
#+NAME ex81
#+BEGIN_SRC C
  #include <stdio.h>

  unsigned patternA(int j, int k) {
    int w = 8 * sizeof(int);
    int p1 = w - k;

    return ((1 << p1) - 1) << k;
  }

  unsigned patternB(int j, int k) {
    return ((1 << k) - 1) << j;
  }


  int main() {
    printf("%u\n", patternA(8, 10));
    printf("%u\n", patternB(5, 6));

    return 0;
  }
#+END_SRC

#+RESULTS:
| 4294966272 |
|       2016 |
* Homework Problem 2.82
#+NAME ex82
#+BEGIN_SRC C
  #include <stdio.h>
  #include <stdlib.h>

  int main() {
    /* Create some arbitrary values */
    int x = random();
    int y = random();
    /* Convert to unsigned */
    unsigned ux = (unsigned) x;
    unsigned uy = (unsigned) y;

    printf("%d %d %u %u\n", x, y, ux, uy);

    printf("A. %d\n", (x < y) == (-x > -y));
    printf("B. %d\n", ((x + y) << 4) + y - x == 17 * y + 15 * x);
    printf("C. %d\n", ~x + ~y + 1 == ~(x + y));
    printf("D. %d\n", (ux - uy) == -(unsigned)(y - x));
    printf("E. %d\n", ((x >> 2) << 2) <= x);

    return 0;
  }
#+END_SRC

#+RESULTS:
| 1804289383 | 846930886 | 1804289383 | 846930886 |
| A.         |         1 |            |           |
| B.         |         1 |            |           |
| C.         |         1 |            |           |
| D.         |         1 |            |           |
| E.         |         1 |            |           |
* Homework Problem 2.83
** A
  S = Y * (2^-k / (1 - 2^-k))
** B
  101    -> 5/7   (* 5  (/ (expt 2 -3) (- 1 (expt 2 -3)))) 0.7142857142857142
  0110   -> 2/5   (* 6  (/ (expt 2 -4) (- 1 (expt 2 -4)))) 0.4
  010011 -> 19/63 (* 19 (/ (expt 2 -6) (- 1 (expt 2 -6)))) 0.30158730158730157
* Homework Problem 2.84
#+NAME ex84
#+BEGIN_SRC C
  #include <stdio.h>
  #include <float.h>

  unsigned f2u(float x) {
    return *(unsigned*)(&x);
  }

  int float_le(float x, float y) {
    unsigned ux = f2u(x);
    unsigned uy = f2u(y);

    /* Get the sign bits */
    unsigned sx = ux >> 31;
    unsigned sy = uy >> 31;
    /* Give an expression using only ux, uy, sx, and sy */
    return sx > sy && uy != 0x800000 ||
      ux == 0x800000 && uy != 0x800000 ||
      sx == sy && sx == 1 && ux > uy ||
      sx == sy && sx == 0 && uy != 0x800000 && ux < uy;
  }

  int main() {
    printf("%d\n", float_le(0.2, 0.5));   /* 1 */
    printf("%d\n", float_le(0.2, -0.5));  /* 0 */
    printf("%d\n", float_le(-0.2, 0.5));  /* 1 */
    printf("%d\n", float_le(-0.2, -0.5)); /* 0 */

    printf("%d\n", float_le(0.5, 0.2));   /* 0 */
    printf("%d\n", float_le(0.5, -0.2));  /* 0 */
    printf("%d\n", float_le(-0.5, 0.2));  /* 1 */
    printf("%d\n", float_le(-0.5, -0.2)); /* 1 */

    printf("%d\n", float_le(0.5, FLT_MAX)); /* 1 */
    printf("%d\n", float_le(FLT_MAX, 0.5)); /* 0 */
    printf("%d\n", float_le(0.5, FLT_MIN)); /* 0 */
    printf("%d\n", float_le(FLT_MIN, 0.5)); /* 1 */

    printf("%d\n", float_le(-0.5, FLT_MAX)); /* 1 */
    printf("%d\n", float_le(FLT_MAX, -0.5)); /* 0 */
    printf("%d\n", float_le(-0.5, FLT_MIN)); /* 0 */
    printf("%d\n", float_le(FLT_MIN, -0.5)); /* 1 */

    return 0;
  }
#+END_SRC

#+RESULTS:
| 1 |
| 0 |
| 1 |
| 0 |
| 0 |
| 0 |
| 1 |
| 1 |
| 1 |
| 0 |
| 0 |
| 1 |
| 1 |
| 0 |
| 0 |
| 1 |
* Homework Problem 2.85
  k = 3 and n = 5, bias = 3
** A
  7.0 -> 0|101|11000

  E = x - bias = 5 - 3 = 2
  f = 24/32
  M = 1 + f = 56/32 = 7/4
  V = 2^2 * 7/4 = 7.0
** B
  > odd -> 0|110|11111
  E = x - bias = 6 - 3 = 3
  f = 31 / 32
  M = 1 + f = 63/32
  V = 2³ * 63/32 = 15.75
** C
  < 1/x -> 0|001|00000

  E = 1 - bias = 1 - 3 = -2
  f = 0 / 32
  M = 1 + f = 32/32 = 1
  V = 2^-2 * 1 = 0.25
  -> 1/0.25 = 4
* Homework Problem 2.86
  k = 15 and n = 63

  V = 2^ (-n - 2^ (k-1) + 2)
  V = 1/2^16445 -> 3.6451995318824746025284059336194e-4951

  V = 2^ (-2^ (k-1) + 2)
  V = 1/2^16382 -> 3.3621031431120935062626778173218e-4932

  V = (1 - 2^ (-n-1)) * 2^ (2^ (k-1))
  V = 2^16384 * (1 - 1/2^64) -> 1.189731495357231765021263853031e+4932

  |                                | Extended             |                               precision |
  | Description                    | Value                |                                 Decimal |
  |--------------------------------+----------------------+-----------------------------------------|
  | Smallest positive denormalized | 1/2^16445             | 3.6451995318824746025284059336194e-4951 |
  | Smallest positive normalized   | 1/2^16382             | 3.3621031431120935062626778173218e-4932 |
  | Largest normalized             | 2^16384 * (1 - 1/2^64) |  1.189731495357231765021263853031e+4932 |
* Homework Problem 2.87
  k = 5 and n = 10, bias = 15

  -0:
  1|00001|0000000000
  E = 1 - 15 = -14
  M = 0/1024
  Hex = 8400

  >2:
  0|10000|0000000001
  E = 16 - 15 = 1
  f = 1/1024
  M = 1 + f = 1 + 1/1024 = 1025/1024 = 1025/1024
  V = 2^1 * 1025/1024 = 2050/1024 -> 2.001953125
  Hex = 4001

  512:
  0|11000|1111111110
  E = 24 - 15 = 9
  f = 1022/1024 = 511/512
  M = 1 + f = 1 + 511/512 = 512/512
  V = 2^9 * 512/512 -> 512
  Hex = 63FE

  >d:
  0|00000|1111111111
  E = (-2)^4 + 2 = 18
  M = 1 - 2^-10 = 1023/1024
  V = 18 * 1023/1024 = 9207/512 = 17.98242
  Hex = 03FF

  -\infty:
  1|11111|0000000000
  Hex = FC00

  3BB0:
  0|01110|1110110000
  E = 15 - 1 = 14 -> -1
  f = 944/1024 = 59/64
  M = 1 + f = 123/64
  V = 2^-1 * 123/64 = 123/128 -> 0.9609375

  | Description                         | Hex  | M         |   E | V            |           D |
  |-------------------------------------+------+-----------+-----+--------------+-------------|
  | -0                                  | 8400 | 0/1024    | -14 | -0           |        -0.0 |
  | Smallest value > 2                  | 4001 | 1025/1024 |   1 | 2050/1024    | 2.001953125 |
  | 512                                 | 63FE | 512/512   |   9 | 2⁹ * 512/512 |       512.0 |
  | Largest denormalized                | 03FF | 1023/1024 |  18 | 9207/512     |    17.98242 |
  | -\infty                             | FC00 | -         |   - | -\infty      |     -\infty |
  | Number with hex representation 3BB0 | 3BB0 | 123/64    |  -1 | 123/128      |   0.9609375 |
* Homework Problem 2.88
  Format A: s = 1, k = 5 and n = 3, bias = 15
  Format A: s = 1, k = 4 and n = 4, bias = 7

  E = e - k = 15 - 15 = 0
  V = -(2^0) * (1 + 1/8) = -9/8
  E = 7 - 7 = 0
  V = -(2⁰) * (1 + 2/16) = -9/8

  E = 22 - 15 = 7
  V = 2^7 * (1 + 3/8) = 176
  E = 14 - 7 = 7
  V = 2^7 * (1 + 6/16) = 176

  E = 7 - 15 = -8
  V = -(2^-8) * (1 + 2/8) = -5/1024
  E = 0 - 7 = -7
  V = -(2^-7) * 1/16 = -1/2048

  E = 1 - 15 = -14
  V = 2^-14 * 7/8 = 7/131072
  E = 1 - 7 = -6
  V = 2^-6 * 1/16 = 1/1024

  E = 28 - 15 = 13
  V = -(2^13) * (1 + 0/8) = -8192
  E = 14 - 7 = 7
  V = -(2^7) * (1 + 15/16) = -248

  E = 23 - 15 = 8
  V = 2^8 * (1 + 4/8) = 384
  E = 14 - 7 = 7
  V = 2⁷ * (1 + 15/16) = 248

  | Format A    |          | Format B    |         |
  | Bits        | Value    | Bits        | Value   |
  |-------------+----------+-------------+---------|
  | 1 01111 001 | -9/8     | 1 0111 0010 | -9/8    |
  | 0 10110 011 | 176      | 0 1110 0110 | 176     |
  | 1 00111 010 | -5/1024  | 1 0000 0001 | -1/2048 |
  | 0 00000 111 | 7/131072 | 0 0000 0001 | 1/1024  |
  | 1 11100 000 | -8192    | 1 1110 1111 | -248    |
  | 0 10111 100 | 384      | 0 1110 1111 | 248     |
