* Practice Problem 2.1
** A
  Ox39A7F8 to binary

  3    9    A    7    F    8
  0011 1001 1010 0111 1111 1000
** B
  binary 1100100101111011 to hexadecimal

  1100 1001 0111 1011
  C    9    7    B
** C
  OxD5E4C to binary

  D    5    E    4    C
  1101 0101 1110 0100 1100
** D
  binary 1001101110011110110101 to hexadecimal

  0010 0110 1110 0111 1011 0101
  2    6    E    7    B    5
* Practice Problem 2.2
  |  n | 2^n (decimal) | 2^n (hexadecimal) |
  |----+--------------+------------------|
  |  9 |          512 |            0x200 |
  | 19 |       524288 |          0x80000 |
  | 14 |        16384 |           0x4000 |
  | 16 |        65536 |          0x10000 |
  | 17 |       131072 |          0x20000 |
  |  5 |           32 |             0x20 |
  |  7 |          128 |             0x80 |
* Practice Problem 2.3
  | Decimal | Binary    | Hexadecimal |
  |---------+-----------+-------------|
  |       0 | 0000 0000 |        0x00 |
  |     167 | 1010 0111 |        0xA7 |
  |      62 | 0011 1110 |        0x3E |
  |     188 | 1011 1100 |        0xBC |
  |      55 | 0011 0111 |        0x37 |
  |     136 | 1000 1000 |        0x88 |
  |     243 | 1111 0011 |        0xF3 |
  |      82 | 0101 0010 |        0x52 |
  |     172 | 1010 1100 |        0xAC |
  |     231 | 1110 0111 |        0xE7 |
* Practice Problem 2.4
  A. 0x503C + 0x8    = 0x5044
  B. 0x503C - 0x40   = 0x507C
  C. 0x503C + 64     = 0x507C
  D. 0x50EA - 0x503C = 0xAE
* Practice Problem 2.5
  value = 0x87654321, code in code/data/show-bytes.c

  | -  | Little Endian | Big Endian  |
  | A. | 21 00 00 00   | 00 00 00 21 |
  | B. | 21 43 00 00   | 00 00 43 21 |
  | C. | 21 43 65 00   | 00 65 43 21 |
* Practice Problem 2.6
** A
  0x00359141 -> 0011 0101 1001 0001 0100 0001
  0x4A564504 -> 0100 1010 0101 0110 0100 0101 0000 0100
** B
  22 bits.
        001 *101011001000101000001*
  010010100 *101011001000101000001* 00
** C
  001 and 010010100..00
* Practice Problem 2.7
  0x61 0x62 0x63 0x64 0x65 0x66
* Practice Problem 2.8
  | Operation | Result     |
  |-----------+------------|
  | a         | [01101001] |
  | b         | [01010101] |
  | ~a        | [10010110] |
  | ~b        | [10101010] |
  | a & b     | [01000001] |
  | a \vert b | [01111101] |
  | a ^ b     | [00111100] |
* Practice Problem 2.9
** A
  | R | G | B | Color    |
  |---+---+---+----------|
  | 1 | 1 | 1 | ~Black   |
  | 1 | 1 | 0 | ~Blue    |
  | 1 | 0 | 1 | ~Green   |
  | 1 | 0 | 0 | ~Cyan    |
  | 0 | 1 | 1 | ~Red     |
  | 0 | 1 | 0 | ~Magenta |
  | 0 | 0 | 1 | ~Yellow  |
  | 0 | 0 | 0 | ~White   |
** B
  Blue | Green  = 011
  Yellow & Cyan = 010
  Red ^ Magenta = 001
* Practice Problem 2.10
  | Step      | *x            | *y            |
  |-----------+---------------+---------------|
  | Initially | a             | b             |
  | Step 1    | a             | a ^ b         |
  | Step 2    | a ^ a ^ b = b | a ^ b         |
  | Step 3    | b             | b ^ a ^ b = a |
* Practice Problem 2.11
** A
  first = 3 and last = 3, 3 ^ 3 == 0.
** B
  ^ operator.
** C
  Of first <= last to first < last - in line 11
** Code
#+NAME: ex11
#+BEGIN_SRC C
  #include <stdio.h>

  void inplace_swap(int *x, int *y) {
    ,*y = *x ^ *y;                 /* Step 1 */
    ,*x = *x ^ *y;                 /* Step 2 */
    ,*y = *x ^ *y;                 /* Step 3 */
  }

  void reverse_array(int a[], int cnt) {
    int first, last;
    for (first = 0, last = cnt - 1; first < last; first++, last--) {
      inplace_swap(&a[first], &a[last]);
    }
  }

  void show(int a[], int len) {
    for (int i = 0; i < len; ++i) {
      printf("%d ", a[i]);
    }
    printf("\n");
  }

  int main() {
    int a[] = {1, 2, 3, 4};
    int b[] = {1, 2, 3, 4, 5};

    show(a, 4);
    reverse_array(a, 4);
    show(a, 4);

    show(b, 5);
    reverse_array(b, 5);
    show(b, 5);

    return 0;
  }
#+END_SRC

#+RESULTS: swap
| 1 | 2 | 3 | 4 |   |
| 4 | 3 | 2 | 1 |   |
| 1 | 2 | 3 | 4 | 5 |
| 5 | 4 | 3 | 2 | 1 |
* Practice Problem 2.12
** A
  x & 0x000000FF
** B
  ~(x & 0xFFFFFF00) | (x & 0x000000FF)
** C
  x | 0xFF;
** Code
#+NAME: ex12
#+BEGIN_SRC C
  #include <stdio.h>

  int main() {
    int x = 0x87654321;
    int a = x & 0x000000FF;
    int b = (~x & 0xFFFFFF00) | (x & 0x000000FF);
    int c = x | 0xFF;

    printf("%#010X\n%#010X\n%#010X\n%#010X\n", x, a, b, c);

    return 0;
  }
#+END_SRC

#+RESULTS: mask
| 0X87654321 |
| 0X00000021 |
| 0X789ABC21 |
| 0X876543FF |
* Practice Problem 2.13
** Code
#+NAME: ex13
#+BEGIN_SRC C
  #include <stdio.h>

  /* Declarations of functions implementing operations bis and bic */
  int bis(int x, int m) {
    return x | m;
  }

  int bic(int x, int m) {
    return x & ~m;
  }

  /* Compute x|y using only calls to functions bis and bic */
  int bool_or(int x, int y) {
    int result = bis(x, y);
    return result;
  }

  /* Compute x^y using only calls to functions bis and bic */
  int bool_xor(int x, int y) {
    int result = bis(bic(x, y), bic(y, x));
    return result;
  }

  int main() {
    printf("%d\n", bis(2, 1));
    printf("%d\n", bic(3, 1));
    printf("%d\n", bool_or(2, 1));
    printf("%d\n", bool_or(5, 1));
    printf("%d\n", bool_or(5, 2));
    printf("%d\n", bool_xor(2, 1));
    printf("%d\n", bool_xor(5, 2));
    printf("%d\n", bool_xor(10, 7));
  }
#+END_SRC

#+RESULTS: devax
|  3 |
|  2 |
|  3 |
|  5 |
|  7 |
|  3 |
|  7 |
| 13 |
* Practice Problem 2.14
  x = 0x66
  y = 0x39
  | Expression       | Value |
  |------------------+-------|
  | x & y            |  0x20 |
  | x \vert  y       |  0x7F |
  | ~x \vert ~y      |  0xDF |
  | x & !y           |  0x00 |
  | x && y           |  0x39 |
  | x \vert\vert y   |  0x66 |
  | !x \vert\vert !y |  0x00 |
  | x && ~y          |  0xC6 |
* Practice Problem 2.15
#+NAME: ex15
#+BEGIN_SRC C
  #include <stdio.h>

  int main() {
    int a = 7;
    int b = 7;
    int c = 4;

    int res1 = !((~a & b) | (a & ~b));
    int res2 = !((~a & c) | (a & ~c));

    printf("Res1: %d / Res2: %d", res1, res2);

    return 0;
  }
#+END_SRC

#+RESULTS: equals
: Res1: 1 / Res2: 0
* Practice Problem 2.16
  |      |          |        |          | Logical |          | Arithmetic |          |
  |    x |          | x << 3 |          |  x >> 2 |          |     x >> 2 |          |
  |------+----------+--------+----------+---------+----------+------------+----------|
  |  Hex |   Binary |    Hex |   Binary |     Hex |   Binary |        Hex |   Binary |
  | 0xC3 | 11000011 |   0x18 | 00011000 |    0x30 | 00110000 |       0xF0 | 11110000 |
  | 0x75 | 01110101 |   0xA8 | 10101000 |    0x1D | 00011101 |       0x1D | 00011101 |
  | 0x87 | 10000111 |   0x38 | 00111000 |    0x21 | 00100001 |       0xE1 | 11100001 |
  | 0x66 | 01100110 |   0x30 | 00110000 |    0x19 | 00011001 |       0x19 | 00011001 |
* Practice Problem 2.17
  | Hexadecimal | Binary | B2U_4(x)        | B2T_4(x)          |
  |-------------+--------+----------------+------------------|
  |         0xE | [1110] | 2³+2²+2¹=14    | -2³+2²+2¹=-2     |
  |         0x0 | [0000] | 0              | 0                |
  |         0x5 | [0101] | 2²+2⁰=5        | 2²+2⁰=5          |
  |         0x8 | [1000] | 2³=8           | -2³=-8           |
  |         0xD | [1101] | 2³+2²+2⁰=13    | -2³+2²+2⁰=-3     |
  |         0xF | [1111] | 2³+2²+2¹+2⁰=15 | -2³+2²+2¹+2⁰= -1 |
* Practice Problem 2.18
  |   |   Hex | Dec |
  |---+-------+-----|
  | A | 0x2E0 | 736 |
  | B | -0x58 | -88 |
  | C |  0x28 |  40 |
  | D | -0x30 | -48 |
  | E |  0x78 | 120 |
  | F |  0x88 | 136 |
  | G | 0x1F8 | 504 |
  |   |   0x8 |   8 |
  | H |  0xC0 | 192 |
  | I | -0x48 | -72 |
* Practice Problem 2.19
  |  x | T2U_4(x)                                  |
  |----+------------------------------------------|
  | -8 | -2³          -> [1000] -> 2³=8           |
  | -3 | -2³+2²+2⁰    -> [1101] -> 2³+2²+2⁰=13    |
  | -2 | -2³+2²+2¹    -> [1110] -> 2³+2²+2¹=14    |
  | -1 | -2³+2²+2¹+2⁰ -> [1111] -> 2³+2²+2¹+2⁰=15 |
  |  0 | 0            -> [0000]  -> 0             |
  |  5 | 2²+2⁰        -> [0101] -> 2²+2⁰=5        |
* Practice Problem 2.20
  -8 = -8+2⁴ = -8+16 = 8 for x < 0
  -3 = -3+2⁴ = -3+16 = 13 for x < 0
  -2 = -2+2⁴ = -2+16 = 14 for x < 0
  -1 = -1+2⁴ = -1+16 = 15 for x < 0
   0 = 0 for x >= 0
   5 = 5 for x >= 0
* Practice Problem 2.21
  | Expression                    | Type     | Evaluation |
  |-------------------------------+----------+------------|
  | -2147483647-1 ==  2147483648U | Signed   |         1* |
  | -2147483647-1  <  2147483647  | Signed   |          1 |
  | -2147483647-1U <  2147483647  | Unsigned |         0* |
  | -2147483647-1  < -2147483647  | Signed   |          1 |
  | -2147483647-1U < -2147483647  | Signed   |          1 |

#+NAME: ex21
#+BEGIN_SRC C
  #include <stdio.h>

  int main() {
    printf("Result: %d\n", -2147483647-1 ==  2147483648U);
    printf("Result: %d\n", -2147483647-1  <  2147483647);
    printf("Result: %d\n", -2147483647-1U <  2147483647);
    printf("Result: %d\n", -2147483647-1  < -2147483647);
    printf("Result: %d\n", -2147483647-1U < -2147483647);

    return 0;
  }
#+END_SRC

#+RESULTS: convert
| Result: | 1 |
| Result: | 1 |
| Result: | 0 |
| Result: | 1 |
| Result: | 1 |
* Practice Problem 2.22
** A
  [1011]
  -x_3*2³ + Sum(x_i*2^i)
  -8 + (0*4) + (1*2) + (1*1)
  -8 + 3
  -5
** B
  [11011]
  -x_4*2⁴ + Sum(x_i*2^i)
  -1*16 + (1*8) + (0*4) + (1*2) + (1*1)
  -16 + 11
  -5
** C
  [111011]
  -x_5*2⁵ + Sum(x_i*2^i)
  -1*32 + (1*16) + (1*8) + (0*4) + (1*2) + (1*1)
  -32 + 27
  -5
* Practice Problem 2.23
#+NAME: ex23
#+BEGIN_SRC C
  #include <stdio.h>

  int fun1(unsigned word) {
    return (int) ((word <<  24) >>  24);
  }

  int fun2(unsigned word) {
    return ((int) word <<  24) >> 24
  }

  int main() {
    unsigned w1 = 0x00000076;
    unsigned w2 = 0x87654321;
    unsigned w3 = 0x000000C9;
    unsigned w4 = 0xEDCBA987;

    printf("fun1(w) %d fun2(w) %d\n", fun1(w1), fun2(w1));
    printf("fun1(w) %d fun2(w) %d\n", fun1(w2), fun2(w2));
    printf("fun1(w) %d fun2(w) %d\n", fun1(w3), fun2(w3));
    printf("fun1(w) %d fun2(w) %d\n", fun1(w4), fun2(w4));

    return 0;
  }
#+END_SRC

#+RESULTS: cast
| fun1(w) | 118 | fun2(w) |  118 |
| fun1(w) |  33 | fun2(w) |   33 |
| fun1(w) | 201 | fun2(w) |  -55 |
| fun1(w) | 135 | fun2(w) | -121 |
* Practice Problem 2.24
  | Hex      |           | Unsigned |           | Two's complement |           |
  | Original | Truncated | Original | Truncated |         Original | Truncated |
  | 0        |         0 |        0 |         0 |                0 |         0 |
  | 2        |         2 |        2 |         2 |                2 |         2 |
  | 9        |         1 |        9 |         1 |               -7 |         1 |
  | B        |         3 |       11 |         3 |               -5 |         3 |
  | F        |         7 |       15 |         7 |               -1 |        -5 |

  U(2)  -> 2  mod 2^3 = 2
  U(9)  -> 9  mod 2^3 = 1
  U(11) -> 11 mod 2^3 = 3
  U(15) -> 15 mod 2^3 = 7

  T(2)  -> U(2)  = 2 -> -0*2^2 + 1*2¹ + 0*2^0 = 2
  T(-7) -> U(9)  = 1 -> -0*2^2 + 0*2¹ + 1*2^0 = 1
  T(-5) -> U(11) = 3 -> -0*2^2 + 1*2¹ + 1*2^0 = 3
  T(-1) -> U(15) = 7 -> -1*2^2 + 1*2¹ + 1*2^0 = -5
* Practice Problem 2.25
#+NAME: ex25
#+BEGIN_SRC C
  #include <stdio.h>

  /* WARNING: This is buggy code */
  float sum_elements(float a[], unsigned length) {
    int i;
    float result = 0;

    /* for (i = 0; i <= length - 1; i++) { */
    for (i = 0; i < length; i++) {
      result += a[i];
    }
    return result;
  }

  int main() {
    float v[] = {1, 2};

    printf("%f\n", sum_elements(v, 2));
    printf("%f\n", sum_elements(v, 1));
    printf("%f\n", sum_elements(v, 0));

    return 0;
  }
#+END_SRC

#+RESULTS: ex25
| 3.0 |
| 1.0 |
| 0.0 |
* Practice Problem 2.26
#+NAME: ex26
#+BEGIN_SRC C
  #include <stdio.h>
  #include <string.h>

  /* Determine whether string s is longer than string t */
  /* WARNING: This is buggy code */
  int strlonger(char *s, char *t) {
    int diff = strlen(s) - strlen(t);
    return diff > 0;
    /* return strlen(s) - strlen(t) > 0; */
  }

  int main() {
    char *s1 = "ABC";
    char *s2 = "ABCDEF";

    printf("%d\n", strlonger(s1, s2));
    printf("%d\n", strlonger(s2, s1));
    return 0;
  }
#+END_SRC

#+RESULTS: ex26
| 0 |
| 1 |
* Practice Problem 2.27
#+NAME: ex27
#+BEGIN_SRC C
  #include <stdio.h>
  #include <limits.h>

  /* Determine whether arguments can be added without overflow */
  int uadd_ok(unsigned x, unsigned y);

  int uadd_ok(unsigned x, unsigned y) {
    unsigned sum = x + y;
    return (sum < x || sum < y) ? 0 : 1;
  }

  int main() {
    unsigned a = 1;
    unsigned b = UINT_MAX;

    printf("%d (%u)\n", uadd_ok(a, a), a + a);
    printf("%d (%u)\n", uadd_ok(a, b), a + b);
    return 0;
  }
#+END_SRC

#+RESULTS: ex27
| 1 | (2) |
| 0 | (0) |
* Practice Problem 2.28
  | x   |         |   -u/4x |     |
  | Hex | Decimal | Decimal | Hex |
  | 0   |       0 |       0 |   0 |
  | 5   |       5 |      11 |   B |
  | 8   |       8 |       8 |   8 |
  | D   |      13 |       3 |   3 |
  | F   |      15 |       1 |   1 |

  w = 4 (2⁴)
  0  -> 0
  5  -> 16 - 5  = 11
  8  -> 16 - 8  = 8
  13 -> 16 - 13 = 3
  15 -> 16 - 15 = 1
* Practice Problem 2.29
  | x       | y       | x+y      | x+t/5y  | Case |
  | -20     | -17     | -37      | 5       |    1 |
  | [10100] | [10001] | [100101] | [00101] |      |
  | -24     | -24     | -48      | -16     |    1 |
  | [11000] | [11000] | [110000] | [10000] |      |
  | -23     | -8      | -31      | -31     |    2 |
  | [10111] | [01000] | [11111]  | [11111] |      |
  | 2       | 5       | 7        | 7       |    3 |
  | [00010] | [00101] | [00111]  | [00111] |      |
  | 12      | 4       | 16       | -16     |    4 |
  | [01100] | [00100] | [10000]  | [10000] |      |
* Practice Problem 2.30
#+NAME: ex30
#+BEGIN_SRC C
  #include <stdio.h>
  #include <limits.h>

  /* Determine whether arguments can be added without overflow */
  int tadd_ok(int x, int y);

  int tadd_ok(int x, int y) {
    int sum = x + y;
    if (x > 0 && y > 0 && sum < 0) {
      return 0;
    } else if (x < 0 && y < 0 && sum > 0) {
      return 0;
    }
    return 1;
  }

  int main() {
    int a = INT_MIN;
    int b = INT_MAX;
    int c = -1;
    int d = 1;

    printf("%d (%d)\n", tadd_ok(a, c), a + c);
    printf("%d (%d)\n", tadd_ok(b, d), b + d);
    printf("%d (%d)\n", tadd_ok(c, c), c + c);
    printf("%d (%d)\n", tadd_ok(d, d), d + d);

    return 0;
  }
#+END_SRC

#+RESULTS: ex30
| 0 | (2147483647)  |
| 0 | (-2147483648) |
| 1 | (-2)          |
| 1 | (2)           |
* Practice Problem 2.31
  The ~sum-x~ and ~sum-y~ can cause overflow.
* Practice Problem 2.32
  The values with overflow are with inverted results.
** Code
#+NAME: ex32
#+BEGIN_SRC C
  #include <stdio.h>
  #include <limits.h>

  /* Determine whether arguments can be subtracted without overflow */
  int tsub_ok(int x, int y);

  int tsub_ok(int x, int y) {
    int sum = x + y;
    if (x > 0 && y > 0 && sum < 0) {
      return 0;
    } else if (x < 0 && y < 0 && sum > 0) {
      return 0;
    }
    return 1;
  }

  int main() {
    int a = INT_MIN;
    int b = INT_MAX;
    int c = -1;
    int d = 1;

    printf("%d (%d)\n", tsub_ok(a, d), a - d);
    printf("%d (%d)\n", tsub_ok(a, c), a - c);

    printf("%d (%d)\n", tsub_ok(b, c), b - c);
    printf("%d (%d)\n", tsub_ok(b, d), b - d);

    printf("%d (%d)\n", tsub_ok(c, c), c - c);
    printf("%d (%d)\n", tsub_ok(d, d), d - d);
    printf("%d (%d)\n", tsub_ok(c, d), c - d);

    return 0;
  }
#+END_SRC

#+RESULTS: ex32
| 1 | (2147483647)  |
| 0 | (-2147483647) |
| 1 | (-2147483648) |
| 0 | (2147483646)  |
| 1 | (0)           |
| 1 | (0)           |
| 1 | (-2)          |
* Practice Problem 2.33
  | x   |         |   -t/4x |     |
  | Hex | Decimal | Decimal | Hex |
  | 0   |       0 |       0 |   0 |
  | 5   |       5 |      -5 |  -5 |
  | 8   |       8 |      -8 |  -8 |
  | D   |      13 |     -13 |   3 |
  | F   |      15 |     -15 |   1 |

  w = 4 (2⁴)
  0  -> 0
  5  -> -5
  8  -> -8
  13 -> -13 = 3 (overflow)
  15 -> -15 = 1 (overflow)
* Practice Problem 2.34
  | Mode             |  x |       |  y |       | x*y |          | Truncated x*y |       |
  | Unsigned         |  4 | [100] |  5 | [101] |  20 | [010100] | 4             | [100] |
  | Two's complement | -4 | [100] | -5 | [101] |  20 | [010100] | -4            | [100] |
  | Unsigned         |  2 | [010] |  7 | [111] |  14 | [001110] | 6             | [110] |
  | Two's complement |  2 | [010] | -7 | [111] | -14 | [110010] | 2             | [010] |
  | Unsigned         |  6 | [110] |  6 | [110] |  36 | [100100] | 4             | [100] |
  | Two's complement | -6 | [110] | -6 | [110] |  36 | [100100] | -4            | [100] |
* Practice Problem 2.35
** 1
  x = 2 and y = 4 -> w = 3
  2*4 = 8 + 1*2³ -> (-8 .. 7)
  8 = 8 + 9
  8 = 17 (overflow)

  x = 2 and y = 3 -> w = 3
  2*3 = 6 + 0*2³
  6 = 6
** 2
  x = 2 and y = 4, p = 8
  8 = 2 * 4 + r (r = 0)
  8 = 8

  p = 3 * 2 + 1 -> (x = 3 and r = 1)
  p = 7
** 3
  x = 2 and y = 4, p = 8 and r = 0
  8 = 2 * q + 0
  q = 8 / 2 = 4
** Code
#+NAME: ex35
#+BEGIN_SRC C
  #include <stdio.h>
  #include <limits.h>

  /* Determine whether arguments can be multiplied without overflow */
  int tmult_ok(int x, int y) {
    int p = x*y;
    /* Either x is zero, or dividing p by x gives y */
    return !x || p/x == y;
  }

  int main() {
    int a = 0;
    int b = 2;
    int c = 5;
    int d = INT_MAX;

    printf("%d (%d)\n", tmult_ok(a, a), a * a);
    printf("%d (%d)\n", tmult_ok(b, c), b * c);
    printf("%d (%d)\n", tmult_ok(b, d), b * d);

    return 0;
  }
#+END_SRC

#+RESULTS: ex35
| 1 | (0)  |
| 1 | (10) |
| 0 | (-2) |
* Practice Problem 2.36
#+NAME: ex36
#+BEGIN_SRC C
  #include <stdio.h>
  #include <stdlib.h>
  #include <limits.h>

  /* Determine whether arguments can be multiplied without overflow */
  int tmult_ok(int64_t x, int64_t y) {
    int64_t p = x*y;
    return p == (int)(x*y);
  }

  int main() {
    int a = 0;
    int b = 2;
    int c = 5;
    int d = INT_MAX;

    printf("%d (%d)\n", tmult_ok(a, a), a * a);
    printf("%d (%d)\n", tmult_ok(b, c), b * c);
    printf("%d (%d)\n", tmult_ok(b, d), b * d);

    return 0;
  }
#+END_SRC

#+RESULTS: ex36
| 1 | (0)  |
| 1 | (10) |
| 0 | (-2) |
